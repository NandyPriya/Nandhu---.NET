using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace singlylinkedlist1
{
    internal class Singlylinkedlist11
    {
        public class SinglyLinkedListNodeDemo<T>
        {
            internal T data;
            internal SinglyLinkedListNodeDemo<T> next;

            public SinglyLinkedListNodeDemo(T d)
            {
                data = d;
                next = null;
            }
        }
        public class UserSingleLinkedList<T>
        {
            SinglyLinkedListNodeDemo<T> head;


            internal void InsertNodeInFront(UserSingleLinkedList<T> list, T dataToInsert)
            {
                SinglyLinkedListNodeDemo<T> node = new SinglyLinkedListNodeDemo<T>(dataToInsert);
                node.next = list.head;
                list.head = node;

            }

           internal  void InsertAtTheEnd(UserSingleLinkedList<T> list, T dataToInsert)
            {
                SinglyLinkedListNodeDemo<T> node2 = new SinglyLinkedListNodeDemo<T>(dataToInsert);
                if (list.head == null)
                {
                    list.head = node2;
                    return;
                }
                SinglyLinkedListNodeDemo<T> node1 = GetLastNode(list);
                node1.next = node2;

            }

            internal SinglyLinkedListNodeDemo<T> GetLastNode(UserSingleLinkedList<T> list)
            {
                SinglyLinkedListNodeDemo<T> tempnode = list.head;
                while (tempnode.next != null)
                {
                    tempnode = tempnode.next;
                }
                return tempnode;
            }

            internal void InsertAfter(SinglyLinkedListNodeDemo<T> prevNode, T data)
            {
                if (prevNode == null)
                {
                    Console.WriteLine("This cannot be null");
                    return;

                }
                SinglyLinkedListNodeDemo<T> newnode = new SinglyLinkedListNodeDemo<T>(data);
                newnode.next = prevNode.next;
                prevNode.next = newnode;
            }

            internal void DeleteByFindingData(UserSingleLinkedList<T> list, T key)
            {

                SinglyLinkedListNodeDemo<T> temp = list.head;
                SinglyLinkedListNodeDemo<T> prev = null;
                if (temp != null && temp.data.Equals(key))
                {
                    
                    list.head = temp.next;
                    return;
                }
               while(temp != null && !temp.data.Equals(key))
                {
                    prev = temp;
                    temp = temp.next;
                }
                if (temp == null)
                {
                    return;
                }
                prev.next = temp.next;
            }
            internal void display(UserSingleLinkedList<T> list)
            {
                SinglyLinkedListNodeDemo<T>   current = list.head;

                if (head == null)
                {
                    Console.WriteLine("List is empty");
                    return;
                }
                Console.WriteLine("Nodes of singly linked list: ");
                while (current != null)
                {
                    
                    Console.Write(current.data + " ");
                    current = current.next;
                }
                Console.WriteLine();
            }
        }
        }
    }

