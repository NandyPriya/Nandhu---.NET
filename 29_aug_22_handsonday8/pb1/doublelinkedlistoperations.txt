using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace doublylinkedlist1
{
    internal class Doublylinkedlist11
    {
        internal class DNode<T>
        {
            internal T data;
            internal DNode<T> prev;
            internal DNode<T> next;
            public DNode(T d)
            {
                data = d;
                prev = null;
                next = null;
            }
        }
        internal class DoubleLinkedList<T>
        {
            internal DNode<T> head;


            internal void InsertFront(DoubleLinkedList<T> doubleLinkedList, T data)
            {
                DNode<T> newNode = new DNode<T>(data);
                newNode.next = doubleLinkedList.head;
                newNode.prev = null;
                if (doubleLinkedList.head != null)
                {
                    doubleLinkedList.head.prev = newNode;
                }
                doubleLinkedList.head = newNode;
            }

            internal void InsertLast(DoubleLinkedList<T> doubleLinkedList, T data)
            {
                DNode<T> newNode = new DNode<T>(data);
                if (doubleLinkedList.head == null)
                {
                    newNode.prev = null;
                    doubleLinkedList.head = newNode;
                    return;
                }
                DNode<T> lastNode = GetLastNode(doubleLinkedList);
                lastNode.next = newNode;
                newNode.prev = lastNode;
            }
            internal DNode<T> GetLastNode(DoubleLinkedList<T> singlyList)
            {
                DNode<T> temp = singlyList.head;
                while (temp.next != null)
                {
                    temp = temp.next;
                }
                return temp;
            }

            internal void DeleteNodebyKey(DoubleLinkedList<T> doubleLinkedList, int key)
            {
                DNode<T> temp = doubleLinkedList.head;
                if (temp != null && temp.data.Equals(key))
                {
                    doubleLinkedList.head = temp.next;
                    doubleLinkedList.head.prev = null;
                    return;
                }
                while (temp != null && !temp.data.Equals(key))
                {
                    temp = temp.next;
                }
                if (temp == null)
                {
                    return;
                }
                if (temp.next != null)
                {
                    temp.next.prev = temp.prev;
                }
                if (temp.prev != null)
                {
                    temp.prev.next = temp.next;
                }
            }

            internal void display(DoubleLinkedList<T> list)
            {
                DNode<T> current = list.head;

                if (head == null)
                {
                    Console.WriteLine("List is empty");
                    return;
                }
                Console.WriteLine("Nodes of doubly linked list: ");
                while (current != null)
                {

                    Console.Write(current.data + " ");
                    current = current.next;
                }
                Console.WriteLine();
            }
        }
    }
}
